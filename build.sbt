import play.sbt.routes.RoutesKeys
import play.sbt.PlayImport.PlayKeys
import sbt.Keys._
import sbt._
import scoverage.ScoverageKeys
import uk.gov.hmrc.DefaultBuildSettings._
import uk.gov.hmrc.sbtdistributables.SbtDistributablesPlugin._

lazy val appName: String = "pension-administrator-frontend"

  lazy val root =  (project in file("."))
    .disablePlugins(JUnitXmlReportPlugin)
    .enablePlugins(play.sbt.PlayScala, SbtAutoBuildPlugin, SbtGitVersioning, SbtDistributablesPlugin)
    .settings(scalaSettings: _*)
    .settings(defaultSettings(): _*)
    .settings(publishingSettings: _*)
    .settings(inConfig(Test)(testSettings): _*)
    .settings(scalaVersion := "2.13.8")
    .settings(
      scalacOptions += "-Wconf:cat=unused-imports&src=html/.*:s",
      scalacOptions += "-Wconf:src=routes/.*:s"
    )
    .settings(majorVersion := 0)
    .settings(
      name := appName,
      RoutesKeys.routesImport ++= Seq(
        "models.Mode",
        "models.CheckMode",
        "models.NormalMode",
        "models.UpdateMode",
        "models.Index"
      ),
    TwirlKeys.templateImports ++= Seq(
      "play.twirl.api.HtmlFormat",
      "play.twirl.api.HtmlFormat._",
      "uk.gov.hmrc.play.views.html.helpers._",
      "uk.gov.hmrc.play.views.html.layouts._"
    ),
      PlayKeys.playDefaultPort := 8201,
      ScoverageKeys.coverageExcludedFiles := "<empty>;Reverse.*;.*filters.*;.*handlers.*;.*components.*;.*models.*;.*repositories.*;" +
        ".*BuildInfo.*;.*javascript.*;.*FrontendAuditConnector.*;.*Routes.*;.*GuiceInjector;.*UserAnswersCacheConnector;" +
        ".*ControllerConfiguration;.*LanguageSwitchController",
      ScoverageKeys.coverageMinimumStmtTotal := 80,
      ScoverageKeys.coverageFailOnMinimum := true,
      ScoverageKeys.coverageHighlighting := true
    )
    .settings(
      scalacOptions ++= Seq(/*"-Xfatal-warnings",*/ "-feature"),
      libraryDependencies ++= AppDependencies(),
      retrieveManaged := true,
      update / evictionWarningOptions := EvictionWarningOptions.default.withWarnScalaVersionEviction(false)
    )
    .settings(resolvers ++= Seq(
      Resolver.jcenterRepo
    )
    )
    .settings(
      // concatenate js
      Concat.groups := Seq(
        "javascripts/pensionadministratorfrontend-app.js" -> group(Seq(
          "javascripts/location-autocomplete.min.js",
          "javascripts/pensionadministratorfrontend.js"
        ))),
      // prevent removal of unused code which generates warning errors due to use of third-party libs
      uglifyCompressOptions := Seq("unused=false", "dead_code=false"),
      pipelineStages := Seq(digest),
      // below line required to force asset pipeline to operate in dev rather than only prod
      Assets / pipelineStages := Seq(concat, uglify),
      // only compress files generated by concat
      uglify / includeFilter := GlobFilter("pensionadministratorfrontend-*.js")
    )

lazy val testSettings: Seq[Def.Setting[_]] = Seq(
  fork        := true,
  javaOptions ++= Seq(
    "-Dconfig.resource=test.application.conf"
  )
)
